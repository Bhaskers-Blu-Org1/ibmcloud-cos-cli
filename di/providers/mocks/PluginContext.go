// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/IBM-Cloud/ibm-cloud-cli-sdk/bluemix/models"
import plugin "github.com/IBM-Cloud/ibm-cloud-cli-sdk/plugin"

// PluginContext is an autogenerated mock type for the PluginContext type
type PluginContext struct {
	mock.Mock
}

// APIEndpoint provides a mock function with given fields:
func (_m *PluginContext) APIEndpoint() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// CF provides a mock function with given fields:
func (_m *PluginContext) CF() plugin.CFContext {
	ret := _m.Called()

	var r0 plugin.CFContext
	if rf, ok := ret.Get(0).(func() plugin.CFContext); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plugin.CFContext)
		}
	}

	return r0
}

// CLIName provides a mock function with given fields:
func (_m *PluginContext) CLIName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// CloudName provides a mock function with given fields:
func (_m *PluginContext) CloudName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// CloudType provides a mock function with given fields:
func (_m *PluginContext) CloudType() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ColorEnabled provides a mock function with given fields:
func (_m *PluginContext) ColorEnabled() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// CommandNamespace provides a mock function with given fields:
func (_m *PluginContext) CommandNamespace() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ConsoleEndpoint provides a mock function with given fields:
func (_m *PluginContext) ConsoleEndpoint() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// CurrentAccount provides a mock function with given fields:
func (_m *PluginContext) CurrentAccount() models.Account {
	ret := _m.Called()

	var r0 models.Account
	if rf, ok := ret.Get(0).(func() models.Account); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.Account)
	}

	return r0
}

// CurrentRegion provides a mock function with given fields:
func (_m *PluginContext) CurrentRegion() models.Region {
	ret := _m.Called()

	var r0 models.Region
	if rf, ok := ret.Get(0).(func() models.Region); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.Region)
	}

	return r0
}

// CurrentResourceGroup provides a mock function with given fields:
func (_m *PluginContext) CurrentResourceGroup() models.ResourceGroup {
	ret := _m.Called()

	var r0 models.ResourceGroup
	if rf, ok := ret.Get(0).(func() models.ResourceGroup); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.ResourceGroup)
	}

	return r0
}

// HTTPTimeout provides a mock function with given fields:
func (_m *PluginContext) HTTPTimeout() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// HasAPIEndpoint provides a mock function with given fields:
func (_m *PluginContext) HasAPIEndpoint() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HasTargetedAccount provides a mock function with given fields:
func (_m *PluginContext) HasTargetedAccount() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HasTargetedCF provides a mock function with given fields:
func (_m *PluginContext) HasTargetedCF() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HasTargetedCFEE provides a mock function with given fields:
func (_m *PluginContext) HasTargetedCFEE() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HasTargetedPublicCF provides a mock function with given fields:
func (_m *PluginContext) HasTargetedPublicCF() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HasTargetedRegion provides a mock function with given fields:
func (_m *PluginContext) HasTargetedRegion() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HasTargetedResourceGroup provides a mock function with given fields:
func (_m *PluginContext) HasTargetedResourceGroup() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IAMEndpoint provides a mock function with given fields:
func (_m *PluginContext) IAMEndpoint() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IAMRefreshToken provides a mock function with given fields:
func (_m *PluginContext) IAMRefreshToken() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IAMToken provides a mock function with given fields:
func (_m *PluginContext) IAMToken() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IMSAccountID provides a mock function with given fields:
func (_m *PluginContext) IMSAccountID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IsLoggedIn provides a mock function with given fields:
func (_m *PluginContext) IsLoggedIn() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsSSLDisabled provides a mock function with given fields:
func (_m *PluginContext) IsSSLDisabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Locale provides a mock function with given fields:
func (_m *PluginContext) Locale() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PluginConfig provides a mock function with given fields:
func (_m *PluginContext) PluginConfig() plugin.PluginConfig {
	ret := _m.Called()

	var r0 plugin.PluginConfig
	if rf, ok := ret.Get(0).(func() plugin.PluginConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plugin.PluginConfig)
		}
	}

	return r0
}

// PluginDirectory provides a mock function with given fields:
func (_m *PluginContext) PluginDirectory() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RefreshIAMToken provides a mock function with given fields:
func (_m *PluginContext) RefreshIAMToken() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Trace provides a mock function with given fields:
func (_m *PluginContext) Trace() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// UserEmail provides a mock function with given fields:
func (_m *PluginContext) UserEmail() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// VersionCheckEnabled provides a mock function with given fields:
func (_m *PluginContext) VersionCheckEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
